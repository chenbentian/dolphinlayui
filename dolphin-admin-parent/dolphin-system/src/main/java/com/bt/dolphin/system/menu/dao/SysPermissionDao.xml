<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bt.dolphin.system.menu.dao.SysPermissionDao">
	
	<select id="getPermissionByAccoutAndAppId" parameterType="String" resultType="com.bt.dolphin.system.menu.vo.SysPermissionVo">
		SELECT up.PERMISSION_ID,up.PERMISSION_NAME,up.PERMISSION_PATH,up.PERMISSION_TYPE FROM `sy_user_permission_rela` up
		 <where>
		 	<if test="accountName!=null  and accountName!=''">
		 		up.USER_NO =  #{accountName}
		 	</if>
		 	<if test="appId!=null  and appId!=''">
		 		 and up.APP_ID = #{appId}
		 	</if>
		 </where>
	</select>
	
	<select id="getPermissionById" parameterType="String" resultType="com.bt.dolphin.system.menu.vo.SysPermissionVo">
		 SELECT p.APP_ID,p.APP_ID,p.PERMISSION_ID,p.PERMISSION_NAME,p.PERMISSION_PARENTID,p.PERMISSION_CODE,p.PERMISSION_TYPE,p.PERMISSION_PATH,p.PERMISSION_STATUS FROM `sy_permission` p
		 where  p.PERMISSION_ID = #{permissionId}
	</select>
	
	<select id="getSubPermissByPId" parameterType="String" resultType="com.bt.dolphin.system.menu.vo.SysPermissionVo">
		SELECT p.APP_ID,p.PERMISSION_ID,p.PERMISSION_NAME,p.PERMISSION_PARENTID,p.PERMISSION_CODE,p.PERMISSION_TYPE,p.PERMISSION_PATH,
		(SELECT count(1) FROM sy_permission b WHERE b.PERMISSION_PARENTID=p.PERMISSION_ID) isLeaf FROM `sy_permission` p
		 <where>
		 	   p.PERMISSION_STATUS = '1' and p.PERMISSION_PARENTID = #{pId}
		 </where>
	</select>
	
	<insert id="insertSysPermission" parameterType="com.bt.dolphin.system.menu.vo.SysPermissionVo">
    	insert into sy_permission(PERMISSION_ID,APP_ID,PERMISSION_PARENTID,PERMISSION_NAME,PERMISSION_CODE,PERMISSION_TYPE,PERMISSION_PATH,PERMISSION_STATUS)
    			VALUES(#{permissionId,jdbcType=VARCHAR},#{appId,jdbcType=VARCHAR},#{permissionParentid,jdbcType=VARCHAR},
    			#{permissionName,jdbcType=VARCHAR},#{permissionCode,jdbcType=VARCHAR},#{permissionType,jdbcType=VARCHAR},
    			#{permissionPath,jdbcType=VARCHAR},#{permissionStatus,jdbcType=VARCHAR})
    </insert>
    
     <update id="updateSysPermission" parameterType="com.bt.dolphin.system.menu.vo.SysPermissionVo">
		update sy_permission
		 <set>
		 	 PERMISSION_NAME = #{permissionName,jdbcType=VARCHAR},
		 	 PERMISSION_CODE = #{permissionCode,jdbcType=VARCHAR},
		 	 PERMISSION_PATH = #{permissionPath,jdbcType=VARCHAR}
		 </set>
		 where PERMISSION_ID = #{permissionId}
    </update>
    
    <delete id="deleteBypermissionId" parameterType="String">
        delete FROM sy_permission where PERMISSION_ID = #{permissionId}
    </delete>
    
    <select id="getPermissionExtendById" parameterType="String" resultType="com.bt.dolphin.system.menu.vo.SysPermissionVo">
		 SELECT p.PERMISSION_ID,p.ATTR_CODE,p.ATTR_VALUE FROM  sy_permission_extend p
		 where  p.PERMISSION_ID = #{permissionId}
	</select>
	
	<insert id="insertSysPermissionExtend" parameterType="com.bt.dolphin.system.menu.vo.SysPermissionVo">
    	insert into sy_permission_extend(PER_EX_ID,PERMISSION_ID,ATTR_CODE,ATTR_VALUE)
    			VALUES(#{perExId,jdbcType=VARCHAR},#{permissionId,jdbcType=VARCHAR},
    			#{attrCode,jdbcType=VARCHAR},#{attrValue,jdbcType=VARCHAR})
    </insert>
    
	 <delete id="delPermissionExtendById" parameterType="String">
        delete
        FROM sy_permission_extend
        where PERMISSION_ID = #{permissionId}
    </delete>
    
    <sql id="secharSql">
    		<if test="permissionIdList!=null">
					and r.PERMISSION_ID in 
					 <foreach item="item" collection="permissionIdList" separator="," open="(" close=")" index="">
				      #{item, jdbcType=VARCHAR}
				     </foreach>
			</if>
		    <if test="permissionName!=null and permissionName!=''">
					and p.PERMISSION_NAME like CONCAT('%',#{permissionName,jdbcType=VARCHAR},'%')
			</if>
			 <if test="permissionCode!=null and permissionCode!=''">
					and p.PERMISSION_CODE = #{permissionCode,jdbcType=VARCHAR}
			</if>
	</sql>

    <select id="permisRoleQueryList" resultType="com.bt.dolphin.system.menu.vo.SysPermissionVo" parameterType="com.bt.dolphin.system.menu.vo.SysPermissionCondition">
	    SELECT p.APP_ID,p.APP_ID,p.PERMISSION_ID,p.PERMISSION_NAME,p.PERMISSION_PARENTID,p.PERMISSION_CODE,p.PERMISSION_TYPE,p.PERMISSION_PATH,p.PERMISSION_STATUS 
	    	from sy_permission p where p.PERMISSION_TYPE ='2'
		 <choose>
               <when test="queryType =='dis'">
               	and EXISTS(select 1 from sy_role_permission_rela r where p.PERMISSION_ID = r.PERMISSION_ID 
               		and r.role_id = #{roleId,jdbcType=VARCHAR})
                   <include refid="secharSql"/>
               </when>
                <when test="queryType =='undis'">
                  and not EXISTS(select 1 from sy_role_permission_rela r where p.PERMISSION_ID = r.PERMISSION_ID 
               		and r.role_id = #{roleId,jdbcType=VARCHAR})
                   <include refid="secharSql"/>
               </when>
               <otherwise>
               </otherwise>
           </choose>
    </select>
    
    <insert id="insertPermisRole" parameterType="String">
    	insert into sy_role_permission_rela(PERMISSION_ID,role_id) 
    		VALUES(#{permissionId,jdbcType=VARCHAR},#{roleId,jdbcType=VARCHAR})
    </insert>
    
	 <delete id="delPermisRole" parameterType="String">
        delete FROM sy_role_permission_rela
        where PERMISSION_ID = #{permissionId} and role_id = #{roleId}
    </delete>
    
    <select id="getUserPermisRela" parameterType="String" resultType="com.bt.dolphin.system.menu.vo.SysPermissionVo">
		 SELECT r.USER_ID,r.USER_NO,r.PERMISSION_ID,r.PERMISSION_NAME FROM  sy_user_permission_rela r
		 <where>
		 	<if test="permissionId!=null and permissionId!=''">
					and r.PERMISSION_ID = #{permissionId}
			</if>
			<if test="userNo !=null and userNo!=''">
					and r.USER_NO = #{userNo,jdbcType=VARCHAR}
			</if>
			<if test="userId !=null and userId!=''">
					and r.USER_NO = #{userNo,jdbcType=VARCHAR}
			</if>
		 </where>
	</select>
	
	 <select id="countUserPermisRelaExist" parameterType="String" resultType="int">
		SELECT COUNT(1) FROM `sy_user_permission_rela` up
			WHERE EXISTS(SELECT user_id FROM `sy_user_role_rela` ur WHERE ur.user_id =up.user_id AND  ur.role_id = role_id = #{roleId})
			AND up.PERMISSION_ID = #{permissionId} and  up.user_id = #{userId}
	</select>
	
	 <insert id="insertRolePermisRela" parameterType="String">
    	insert into sy_role_permission_rela(PERMISSION_ID,role_id) 
    		VALUES(#{permissionId,jdbcType=VARCHAR},#{roleId,jdbcType=VARCHAR})
    </insert>
    
   	<insert id="insertUserPermisRela" parameterType="com.bt.dolphin.system.menu.vo.SysPermissionVo">
    	insert into sy_user_permission_rela(USER_ID,USER_NO,PERMISSION_ID,PERMISSION_NAME,PERMISSION_PATH,APP_ID) 
    		VALUES(#{userId,jdbcType=VARCHAR},#{userNo,jdbcType=VARCHAR},#{permissionId,jdbcType=VARCHAR},#{permissionName,jdbcType=VARCHAR},
    		#{permissionPath,jdbcType=VARCHAR},#{appId,jdbcType=VARCHAR})
    </insert>
    
     <delete id="delUserPermisRela" parameterType="String">
        delete FROM sy_user_permission_rela
        where PERMISSION_ID = #{permissionId} and USER_ID = #{userId}
    </delete>
	
</mapper>